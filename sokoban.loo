-- Thoughts:

-- We don't really need the ':' at the end of method declarations,
-- since we'll be viewing them in a dedicated editor that could 
-- color-code them -- no worries about too little redundancy.
-- That leaves two plausible uses for the ':': for blocks and for
-- avoiding some parentheses. Let's try blocks here.
-- (But we would still need : in one-line method defs...)

-- If we made *all* binding instances of variables start with `
-- then it'd be natural to extend this with patterns somehow, in
-- the places you can bind variables -- it'd be easy to distinguish
-- the variables from the pattern pieces. Look into Barry Jay's
-- stuff again?

make-sokoboard of initial-grid ::
   grid ::= initial-grid thaw  -- Make a mutable copy. (What's a better name?)
   width ::= grid find '\n' + 1
   I ::
      find-player:
         grid find 'i' default: grid find 'I'
      move thing from here to there:
         thing has (grid at here) && (: ' .' has (grid at there)),
            if-so: I clear here
                   I drop thing at there
      clear pos:
         grid at pos put (I target pos, if-so (:'.') if-not (:' '))
      target pos:
         '.@I' has (grid at pos)
      drop thing at pos:
         -- Pre: I'm clear at pos
         grid at pos put 
            thing at ('.' = grid at pos, if-so (:1) if-not (:0))
   ::
      render:
         grid freeze
      push dir:
         p ::= I find-player
         I move 'o@' from (p+dir) to (p+dir+dir)
         I move 'iI' from p to (p+dir)
